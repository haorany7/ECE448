def __init__(self):
        """
        Initialize your neural network here. Remember that you will be performing finetuning
        in this network so follow these steps:
        
        1. Initialize convolutional backbone with pretrained model parameters.
        2. Freeze convolutional backbone.
        3. Initialize linear layer(s). 
        """
        super().__init__()
        ################# Your Code Starts Here #################

        # 1. Initialize convolutional backbone with pretrained model parameters
        pretrained_model = resnet18(pretrained=False)
        pretrained_model.load_state_dict(torch.load("resnet18.pt"))

        # 2. Freeze convolutional backbone
        for param in pretrained_model.parameters():
            param.requires_grad = False

        # Remove the last layer to use as the backbone
        self.backbone = nn.Sequential(*list(pretrained_model.children())[:-1])

        # 3. Initialize linear layer(s)
        num_classes=8
        self.fc = nn.Linear(512, num_classes)
        ################## Your Code Ends here ##################

    def forward(self, x):
        """
        Perform a forward pass through your neural net.

        Parameters:
            x:      an (N, input_size) tensor, where N is arbitrary.

        Outputs:
            y:      an (N, output_size) tensor of output from the network
        """
        ################# Your Code Starts Here #################

        x = self.backbone(x)
        x = x.view(x.size(0), -1)
        x = self.fc(x)
        return x
        ################## Your Code Ends here ##################